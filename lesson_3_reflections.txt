When would you want to use a remote repository rather than keeping all your work local?

When work must be shared with other people. When program is collaborative and involves multiple developers, remote repository allows way of sharing code between developers. Also it allows to distrubute code to the end users.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because it gives control which version is used whe working with repository. While working with local version of the repository, some change may be introduced in remote repository that break the current modiefied version in local repository, if local version would be updated automatically. This would bring great confusion.

Describe the differences between forks, clones and brances. When would you use one instead of another?

Forks allow us to take make modifications to repositories that we have no 
permisions for modification. The source repository is not affected by forked 
repository. Clones are duplicates of repositories. When repository is first
 cloned it can be considered as clone of the original repository. Also remote
 repository can be cloned to local machine making a local copy of repository. 
Branches are different differ to clones in the sense that they are modifications
of some state of the repository. Forks are used when we want to modify others
 work but we are not given permission to edi original repository. Clones when
 we want to synchronize local and remote repositories. Branches are made to
 make modifications of repository by not affecting working version of the code. 

What is the benefit of having a copy of the last known state of the remote stored locally?

It allows to track changes that are made to the remote repository by other
contributors since last the last pull.

How would you collaborate without using Git orGitHub? What would be easier, and
what would be harder?

Most likely that collaboration would be done by sending code via email, or
trhough shared dropbox folder. In dropbox it would be less work, but it would 
be less transparent and it would be harder to track conflicting changes. GitHub
although is harder it is more robust. 

When would you want to make changes in a seperate branch rather than directly in master? What does each approach have?

It is usefull to make changes in seprate branch when working on features that
may break current master branch. It allows to test new features discretely and
when features are ready they can be shared with other contributors to get
feedback and confirmation that they can be included in master branch or current
working version of the project.


